<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <key attr.name="invariant" attr.type="string" for="node" id="invariant"/>
 <key attr.name="invariant.scope" attr.type="string" for="node" id="invariant.scope"/>
 <key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
  <default>false</default>
 </key>
 <key attr.name="enterLoopHead" attr.type="boolean" for="edge" id="enterLoopHead">
  <default>false</default>
 </key>
 <key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
 <key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
 <key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
 <key attr.name="specification" attr.type="string" for="graph" id="specification"/>
 <key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
 <key attr.name="producer" attr.type="string" for="graph" id="producer"/>
 <key attr.name="creationTime" attr.type="string" for="graph" id="creationtime"/>
 <key attr.name="startline" attr.type="int" for="edge" id="startline"/>
 <key attr.name="endline" attr.type="int" for="edge" id="endline"/>
 <key attr.name="startoffset" attr.type="int" for="edge" id="startoffset"/>
 <key attr.name="endoffset" attr.type="int" for="edge" id="endoffset"/>
 <key attr.name="originFileName" attr.type="string" for="edge" id="originfile">
  <default>/nobackup/jbreck/sv-benchmarks/c/loops/while_infinite_loop_3.i</default>
 </key>
 <key attr.name="control" attr.type="string" for="edge" id="control"/>
 <key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
 <key attr.name="returnFromFunction" attr.type="string" for="edge" id="returnFrom"/>
 <key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
 <key attr.name="inputWitnessHash" attr.type="string" for="graph" id="inputwitnesshash"/>
 <graph edgedefault="directed">
  <data key="witness-type">correctness_witness</data>
  <data key="sourcecodelang">C</data>
  <data key="producer">CPAchecker 1.7-svn 29852</data>
  <data key="specification">// This automaton contains the specification of the
// Competition on Software Verification.
// It checks only for calls to the __VERIFIER_error() functions
// and also implements some functions which usually lead to a program abort.
CONTROL AUTOMATON SVCOMP

INITIAL STATE Init;

STATE USEFIRST Init :
  MATCH {__VERIFIER_error($?)} -&gt; ERROR("$rawstatement called in $location");
  MATCH {__assert_fail($?)} || MATCH {abort($?)} || MATCH {exit($?)} -&gt; STOP;

END AUTOMATON</data>
  <data key="programfile">/nobackup/jbreck/sv-benchmarks/c/loops/while_infinite_loop_3.i</data>
  <data key="programhash">82047abab67ed5a004a39e42cae2d1d3a7a51339b1ecd6d90d392bc83d02f57b</data>
  <data key="architecture">32bit</data>
  <data key="creationtime">2019-07-09T16:47:45-05:00</data>
  <node id="N18">
   <data key="entry">true</data>
  </node>
  <node id="N24"/>
  <edge source="N18" target="N24">
   <data key="enterLoopHead">true</data>
   <data key="startline">29</data>
   <data key="endline">29</data>
   <data key="startoffset">509</data>
   <data key="endoffset">519</data>
   <data key="enterFunction">main</data>
  </edge>
  <node id="N9"/>
  <edge source="N24" target="N9">
   <data key="enterLoopHead">true</data>
   <data key="startline">33</data>
   <data key="endline">33</data>
   <data key="startoffset">542</data>
   <data key="endoffset">548</data>
   <data key="enterFunction">eval</data>
  </edge>
  <node id="N8"/>
  <edge source="N9" target="N8">
   <data key="startline">25</data>
   <data key="endline">25</data>
   <data key="startoffset">497</data>
   <data key="endoffset">503</data>
   <data key="returnFrom">eval</data>
  </edge>
  <node id="N23"/>
  <edge source="N8" target="N23">
   <data key="startline">33</data>
   <data key="endline">33</data>
   <data key="startoffset">542</data>
   <data key="endoffset">548</data>
  </edge>
  <node id="N1">
   <data key="invariant">cond == (1)</data>
   <data key="invariant.scope">__VERIFIER_assert</data>
  </node>
  <edge source="N23" target="N1">
   <data key="startline">34</data>
   <data key="endline">34</data>
   <data key="startoffset">554</data>
   <data key="endoffset">575</data>
   <data key="enterFunction">__VERIFIER_assert</data>
  </edge>
  <node id="N4"/>
  <edge source="N1" target="N4">
   <data key="startline">11</data>
   <data key="endline">11</data>
   <data key="startoffset">368</data>
   <data key="endoffset">371</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="N1" target="N4">
   <data key="startline">11</data>
   <data key="endline">11</data>
   <data key="startoffset">368</data>
   <data key="endoffset">371</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="N0"/>
  <edge source="N4" target="N0">
   <data key="startline">14</data>
   <data key="endline">14</data>
   <data key="startoffset">414</data>
   <data key="endoffset">420</data>
   <data key="returnFrom">__VERIFIER_assert</data>
  </edge>
  <edge source="N0" target="N24">
   <data key="enterLoopHead">true</data>
   <data key="startline">34</data>
   <data key="endline">34</data>
   <data key="startoffset">554</data>
   <data key="endoffset">577</data>
  </edge>
 </graph>
</graphml>
